library(tidyr)
library(dplyr)
library(ggplot2)
# This file is meant to prototype the raw data access and graphing capabilities
# Read data in from 538
polls538 <- read.csv(url("https://projects.fivethirtyeight.com/polls-page/president_primary_polls.csv"))
#Filter data to relevant polls
main_data <- polls538 %>%
filter(party=="DEM") %>%
filter(cycle==2020) %>%
filter(state=="") %>%
filter(fte_grade %in% c("A","A-")) %>%
select(question_id,poll_id,pollster,end_date,candidate_name,pct) %>%
filter(poll_id==62715)
#Plot results for each candidate
ggplot(data = main_data) +
aes(x = candidate_name, y=pct) +
geom_point() +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# TO DO:
# - Take this basic concept and port to Shiny. Add:
#    1. Ability to customize which poll you use
#    2. Threshold below which candidates drop
#    3. Potential Reallocation rules
#    4. Graph labeling
cutoff <- data.frame(yintercept=3, cutoff=factor(3))
ggplot(data = main_data) +
aes(x = candidate_name, y=pct) +
geom_point() +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
geom_hline(aes(yintercept=yintercept, linetype=cutoff), data=cutoff, show_guide=TRUE)
cutoff <- data.frame(yintercept=3, cutoff=factor(3))
ggplot(data = main_data) +
aes(x = candidate_name, y=pct) +
geom_point() +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
geom_hline(aes(yintercept=yintercept, linetype=cutoff), data=cutoff)
cutoff <- data.frame(yintercept=3, cutoff=factor(3))
ggplot(data = main_data) +
aes(x = candidate_name, y=pct) +
geom_point() +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
geom_hline(aes(yintercept=yintercept, linetype=cutoff), data=cutoff,show.legend = FALSE)
colSum(main_data$pct)
main_data$pct
sum(main_data$pct)
main_data_new <- main_data %>%
filter(pct>3)
sum(main_data_new$pct)
100-sum(main_data_new$pct)
count(main_data_new)
count(main_data_new$candidate_name)
count(main_data_new$pct)
count(main_data_new)
count(main_data_new)[[1]]
(100-sum(main_data_new$pct))/count(main_data_new)[[1]]
remaining <- (100-sum(main_data_new$pct))
even_split_remaining <- remaining/count(main_data_new)[[1]]
main_data$pct_new <- main_data$pct + (main_data$pct>=3)*even_split_remaining
cutoff <- data.frame(yintercept=3, cutoff=factor(3))
ggplot(data = main_data) +
aes(x = candidate_name, y=pct) +
aes(x = candidate_name, y=pct_new) +
geom_point() +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
geom_hline(aes(yintercept=yintercept, linetype=cutoff), data=cutoff,show.legend = FALSE)
main_data
ggplot(data = main_data) +
aes(x = candidate_name, y=pct, legend=  TRUE, colour=alpha('red', 0.05)) +
aes(x = candidate_name, y=pct_new, legend = TRUE, colour=alpha('blue', 0.05) ) +
geom_point() +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
geom_hline(aes(yintercept=yintercept, linetype=cutoff), data=cutoff,show.legend = FALSE)
ggplot(data = main_data) +
aes(x = candidate_name, y=c(pct,pct_new)) +
geom_point() +
scale_colour_manual(values = c("red", "blue")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
geom_hline(aes(yintercept=yintercept, linetype=cutoff), data=cutoff,show.legend = FALSE)
ggplot(data = main_data) +
aes(x = candidate_name, y=c(pct,pct_new)) +
geom_point() +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
geom_hline(aes(yintercept=yintercept, linetype=cutoff), data=cutoff,show.legend = FALSE)
ggplot(data = main_data) +
aes(x = candidate_name, y=pct_new) +
geom_point() +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
geom_hline(aes(yintercept=yintercept, linetype=cutoff), data=cutoff,show.legend = FALSE)
ggplot(data = main_data) +
aes(x = candidate_name, y=pct) +
aes(x = candidate_name, y=pct_new) +
geom_point() +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
geom_hline(aes(yintercept=yintercept, linetype=cutoff), data=cutoff,show.legend = FALSE)
ggplot(data = main_data) +
geom_point(aes(x = candidate_name, y=pct)) +
geom_point(aes(x = candidate_name, y=pct_new)) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
geom_hline(aes(yintercept=yintercept, linetype=cutoff), data=cutoff,show.legend = FALSE)
ggplot(data = main_data) +
geom_point(aes(x = candidate_name, y=pct)) +
geom_point(aes(x = candidate_name, y=pct_new)) +
theme_minimal() +
scale_color_manual(values = c("Original" = '#ff00ff','Reallocated' = '#3399ff')) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
geom_hline(aes(yintercept=yintercept, linetype=cutoff), data=cutoff,show.legend = FALSE)
ggplot(data = main_data) +
geom_point(aes(x = candidate_name, y=pct),show.legend = TRUE) +
geom_point(aes(x = candidate_name, y=pct_new),show.legend = TRUE) +
theme_minimal() +
scale_color_manual(values = c("Original" = '#ff00ff','Reallocated' = '#3399ff')) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
geom_hline(aes(yintercept=yintercept, linetype=cutoff), data=cutoff,show.legend = FALSE)
ggplot(data = main_data) +
geom_point(aes(x = candidate_name, y=pct)) +
geom_point(aes(x = candidate_name, y=pct_new)) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
geom_hline(aes(yintercept=yintercept, linetype=cutoff), data=cutoff,show.legend = FALSE)
ggplot(data = main_data) +
geom_point(aes(x = candidate_name, y=pct)) +
geom_point(aes(x = candidate_name, y=pct_new)) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
geom_hline(aes(yintercept=yintercept, linetype=cutoff), data=cutoff,show.legend = FALSE)
library(tidyr)
library(dplyr)
library(ggplot2)
# This file is meant to prototype the raw data access and graphing capabilities
# Read data in from 538
polls538 <- read.csv(url("https://projects.fivethirtyeight.com/polls-page/president_primary_polls.csv"))
#Filter data to relevant polls
main_data <- polls538 %>%
filter(party=="DEM") %>%
filter(cycle==2020) %>%
filter(state=="") %>%
filter(fte_grade %in% c("A","A-")) %>%
select(question_id,poll_id,pollster,end_date,candidate_name,pct) %>%
filter(poll_id==62715)
main_data_new <- main_data %>%
filter(pct>3)
remaining <- (100-sum(main_data_new$pct))
even_split_remaining <- remaining/count(main_data_new)[[1]]
main_data$pct_new <- main_data$pct + (main_data$pct>=3)*even_split_remaining
#Plot results for each candidate
cutoff <- data.frame(yintercept=3, cutoff=factor(3))
ggplot(data = main_data) +
geom_point(aes(x = candidate_name, y=pct)) +
geom_point(aes(x = candidate_name, y=pct_new)) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
geom_hline(aes(yintercept=yintercept, linetype=cutoff), data=cutoff,show.legend = FALSE)
# TO DO:
# - Take this basic concept and port to Shiny. Add:
#    1. Ability to customize which poll you use
#    2. Threshold below which candidates drop
#    3. Potential Reallocation rules
#    4. Graph labeling
shiny::runApp('GitHub/2020_primary_scenario_analysis')
runApp('GitHub/2020_primary_scenario_analysis')
runApp('GitHub/2020_primary_scenario_analysis')
runApp('GitHub/2020_primary_scenario_analysis')
runApp('GitHub/2020_primary_scenario_analysis')
runApp('GitHub/2020_primary_scenario_analysis')
runApp('GitHub/2020_primary_scenario_analysis')
runApp('GitHub/2020_primary_scenario_analysis')
library(tidyr)
library(dplyr)
library(ggplot2)
# This file is meant to prototype the raw data access and graphing capabilities
# Read data in from 538
polls538 <- read.csv(url("https://projects.fivethirtyeight.com/polls-page/president_primary_polls.csv"))
#Filter data to relevant polls
main_data <- polls538 %>%
filter(party=="DEM") %>%
filter(cycle==2020) %>%
filter(state=="") %>%
filter(fte_grade %in% c("A","A-")) %>%
select(question_id,poll_id,pollster,end_date,candidate_name,pct) %>%
filter(poll_id==62715)
main_data_new <- main_data %>%
filter(pct>3)
remaining <- (100-sum(main_data_new$pct))
even_split_remaining <- remaining/count(main_data_new)[[1]]
main_data$pct_new <- main_data$pct + (main_data$pct>=3)*even_split_remaining
#Plot results for each candidate
cutoff <- data.frame(yintercept=3, cutoff=factor(3))
ggplot(data = main_data) +
geom_point(aes(x = candidate_name, y=pct)) +
geom_point(aes(x = candidate_name, y=pct_new)) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
geom_hline(aes(yintercept=yintercept, linetype=cutoff), data=cutoff,show.legend = FALSE)
# TO DO:
# - Take this basic concept and port to Shiny. Add:
#    1. Ability to customize which poll you use
#    2. Threshold below which candidates drop
#    3. Potential Reallocation rules
#    4. Graph labeling
shiny::runApp('GitHub/2020_primary_scenario_analysis')
install.packages('rsconnect')
rsconnect::setAccountInfo(name='achenzion', token='B3ED29C9809AE25710864D9506DE196F',
secret='c3/Uh8z9kLmkQRK+f6gLYs26mspVSEYKdbEYZbPi')
library(rsconnect)
rsconnect::deployApp('app')
pwd
getwd()
library(rsconnect)
script.dir <- dirname(sys.frame(1)$ofile)
script.dir
rsconnect::deployApp(script.dir+'app')
sys.frame
sys.frame(1)
source('~/Side_projects/primary_dropout_scenarios/deploy.R')
rsconnect::deployApp(script.dir+'app')
library(rsconnect)
sys.frame
sys.frame(1)
script.dir <- dirname(sys.frame(1)$ofile)
script.dir
rsconnect::deployApp(script.dir+'app')
script.dir <- dirname(sys.frame(1)$ofile)
script.dir+"/app"
library(rsconnect)
app_path <- paste(dirname(sys.frame(1)$ofile),"/app")
app_path
rsconnect::deployApp(script.dir)
library(rsconnect)
app_path <- paste(dirname(sys.frame(1)$ofile),"/app.R")
app_path
rsconnect::deployApp(script.dir)
app_path <- dirname(sys.frame(1)$ofile)
app_path
rsconnect::deployApp(".\app.R")
frame_files <- lapply(sys.frames(), function(x) x$ofile)
frame_files <- Filter(Negate(is.null), frame_files)
PATH <- dirname(frame_files[[length(frame_files)]])
PATH
frame_files
sys.frames()
library(rstudioapi)
rstudioapi::getActiveDocumentContext()$path
rstudioapi::getActiveDocumentContext()
dirname(rstudioapi::getActiveDocumentContext()$path)
library(rsconnect)
library(rstudioapi)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
rsconnect::deployApp("app.R")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
rsconnect::deployApp("app.R")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
rsconnect::deployApp("fullapp")
