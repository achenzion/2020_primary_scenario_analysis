shiny::runApp()
#Filter data to relevant polls
main_data <- polls538 %>%
filter(party=="DEM") %>%
filter(cycle==2020) %>%
filter(state=="") %>%
filter(fte_grade %in% c("A","A-")) %>%
select(question_id,poll_id,pollster,end_date,candidate_name,pct) %>%
filter(poll_id==62715)
library(tidyr)
library(dplyr)
library(ggplot2)
# This file is meant to prototype the raw data access and graphing capabilities
# Read data in from 538
polls538 <- read.csv(url("https://projects.fivethirtyeight.com/polls-page/president_primary_polls.csv"))
#Filter data to relevant polls
main_data <- polls538 %>%
filter(party=="DEM") %>%
filter(cycle==2020) %>%
filter(state=="") %>%
filter(fte_grade %in% c("A","A-")) %>%
select(question_id,poll_id,pollster,end_date,candidate_name,pct) %>%
filter(poll_id==62715)
#Plot results for each candidate
ggplot(data = main_data) +
aes(x = candidate_name, y=pct) +
geom_point() +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# TO DO:
# - Take this basic concept and port to Shiny. Add:
#    1. Ability to customize which poll you use
#    2. Threshold below which candidates drop
#    3. Potential Reallocation rules
#    4. Graph labeling
